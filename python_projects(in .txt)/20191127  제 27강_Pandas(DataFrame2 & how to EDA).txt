##################(11.27)27강 #######################
## multi index 
##(R에는 없던 python 만의 독자적인 개념)
import numpy as np 
import pandas as pd

#임의의 Series에 들어갈 난수 생성하기 
np.random.seed(1)

# 간단하게 Series을 하나 생성해 보아요 
s = pd.Series(np.random.randint(1,5,(3,)),
               index = ["총무처","관리처","정보전산처"]) #1차원으로 3개 난수를 추출할 것 
print(s) 
#총무처      2
#관리처      4
#정보전산처    1
#dtype: int32

#이번엔 중첩구조를 섞어보자(처부내 산하 팀)
s = pd.Series(np.random.randint(1,5,(6,)),
               index = [["총무처","관리처","정보전산처","총무처","관리처","정보전산처"],
                       ["인력개발팀","건축팀","개발팀","재무팀","안전팀","운영팀"]])  
                        #총무처와 정보전산처에는 두개의 팀이 있다 
print(s)
#총무처    인력개발팀    1
#관리처    건축팀      4
#정보전산처  개발팀      2
#총무처    재무팀      4
#관리처    안전팀      2
#정보전산처  운영팀      4
#dtype: int32
#인덱스의 '첫번째레벨'  '두번째 레벨' 'value' 이렇게 표현 

# 총무처만 추출해보자
print(s["총무처"])
#인력개발팀    1
#재무팀      4
#dtype: int32

#관리처와 정보전산처를 추출해보아요 => fancy indexing 필요 
#print(s["관리처","정보전산처"]) #에러난다.
print(s[["관리처","정보전산처"]]) 
#관리처    건축팀    4
#정보전산처  개발팀    2
#관리처    안전팀    2
#정보전산처  운영팀    4
#dtype: int32

#1차 인덱스와 2차 인덱스를 이용해서 데이터를 추출해보아요 
# Q: 총무처의 재무팀 인원은 몇명인가요? => tuple 이용 
s[("총무처","재무팀")] # 4
                      # 튜플로 계층을 표현할 수 있다.(1차 인덱스, 2차 인덱스)
s["총무처","재무팀"]   # 튜플특성상 이렇게도 표현 가능하다(좀더 명확한 코딩을 위해 위에것 추천)
s[:,"재무팀"]         #총무처    4
                     #dtype: int32
#s[(:,"재무팀")]     #Error,   ()를 생략해서 사용해야 한다. 






## DataFrame의 다중인덱스
import numpy as np 
import pandas as pd 

np.random.seed(100)

df = pd.DataFrame(np.random.randint(1,5,(6,5)),
                 index = [["총무처","관리처","정보전산처","총무처","관리처","정보전산처"],
                         ["인력개발팀","건축팀","개발팀","재무팀","안전팀","운영팀"]],
                 columns = [["아시아","유럽","아시아","유럽","아시아"],
                           ["한국","독일","일본","프랑스","중국"]])
display(df)

#               	아시아	유럽 아시아 유럽 아시아
#                    한국	독일 일본 프랑스 중국
#총무처	인력개발팀	1	1	 4	   4	4
#정보전산처	개발팀  	3	2	 3	   3	3
#총무처	재무팀 	 3	 2	   1	 1	  4
#관리처	안전팀  	 1	 4	   1	 3	  1
#정보전산처	운영팀    4	2	 2	   3	3

#보기가 힘드니간 정렬해보자 (같은 부처끼리 보기좋게) - index 정리
new_df = df.sort_index(axis=0)
display(new_df)
#                    아시아	유럽	아시아	유럽	아시아
#                     한국	독일	일본	프랑스	중국
#관리처	   건축팀	   4	  1	    3	   3	1
#            안전팀	 1	    4	   1	 3	  1
#정보전산처	개발팀	     3	    2	   3	 3	  3
#           운영팀	     4	    2	   2	 3	  3
#총무처	인력개발팀    1	    1	   4	 4	  4
#          재무팀	     3	    2	   1	 1	  4

new_df = new_df.sort_index(axis=1) #col도 정리하자 
display(new_df)
#               		아시아     	유럽
#                     일본 중국 한국 독일 프랑스
#관리처	     건축팀  3    1    4    1    3
#              안전팀  1    1    1    4    3
#정보전산처	   개발팀 3    3    3     2    3
#              운영팀 2    3    4     2    3
#총무처	인력개발팀  4    4    1     1    4
#             재무팀  1    4    3     2    1


#'유럽' 지역만 추출해보자 => 1차 index추출
df["유럽"] 
#		               독일	프랑스
#총무처	인력개발팀	 1       4
#관리처	건축팀        1       3
#정보전산처 개발팀    2       3
#총무처	재무팀        2       1
#관리처	안전팀        4       3
#정보전산처 운영팀    2       3
# 아시아 지역이 한국만 추출 => 2차 index 추출
df[("아시아","한국")] #Series 형태로 return 

#지역에 상관없이 총무처 정보만 추출 
new_df.loc["총무처"]
#                 아시아   	유럽
#           일본	중국	한국	독일	프랑스
#인력개발팀	 4    4 	1     1     4
#재무팀	   1	4	  3	    2     1

# 총무처의 재무팀만 추출
new_df.loc[("총무처","재무팀")]

# Q.아시아지역 중국의 정보전산처 개발팀 인원은 몇명인가요? 
new_df.loc[("정보전산처","개발팀"),("아시아","중국")] #3 
                                                    #이런 경우는 튜플괄호를 반드시 명시(없에면 에러난다)

# 분류별 이름을 붙여주자     
df = pd.DataFrame(np.random.randint(1,5,(6,5)),
                 index = [["총무처","관리처","정보전산처","총무처","관리처","정보전산처"],
                         ["인력개발팀","건축팀","개발팀","재무팀","안전팀","운영팀"]],
                 columns = [["아시아","유럽","아시아","유럽","아시아"],
                           ["한국","독일","일본","프랑스","중국"]])
df.index.names = ["부처","팀"]
df.columns.names = ["대륙","국가"]
display(df)


#"팀" 이름으로 행을 내림차순 정렬 
df.sort_index(axis=0, level=1, ascending=False) #level로 단계표시(당연히 0부터)
#또는
df.sort_index(axis=0, level="팀", ascending=False)

#국가별로 컬럼을 오름차순으로 정렬
df.sort_index(axis=1, level="국가")




#값을 이용해서 정렬할 수 있다. 
#Q. 아시아지역의 한국 직원수를 기준으로 내림차순 정렬하세요! 
df.sort_values(by=("아시아","한국"), ascending =False)

#Q2. 아시아지역의 한국 직원수를 기준으로 내림차순 정렬하고
#    만약 동률이 존재할 경우 동률애 대해서는 아시아지역의 일본 직원수를 기준으로 오름차순 정렬
df.sort_values(by=[("아시아","한국"),("아시아","일본")], ascending =[False,True])
#     다중조건은 [](대괄호)를 사용해서 정리한다. 







## 다중인덱스 DataFrame에 대한 sum(), mean() 

# Q. 각 국가별 직원수의 합은?

df.sum(axis=0)
#대륙   국가 
#아시아  한국     20
#유럽   독일     16
#아시아  일본     16
#유럽   프랑스    18
#아시아  중국     15
#dtype: int64

# Q. 각 도시 부처별 직원수의 합은 
df.sum(axis=0, level="부처")

# Q. 모든 지역의 각 부처-팀별 평균 인원 
df.mean(axis=1)
#부처     팀    
#총무처    인력개발팀    2.4
#관리처    건축팀      2.0
#정보전산처  개발팀      3.6
#총무처    재무팀      3.0
#관리처    안전팀      2.8
#정보전산처  운영팀      3.2
#dtype: float64






## 열과 인덱스의 위치변경해보기 
## 자료를 보고싶은데, 원하는 형태로 변경해보자
import numpy as np 
import pandas as pd 
df = pd.DataFrame({"이름":["홍길동","김연아","아이유","김길동","신사임당"],
                   "성적":[1.5,4.4,4.5,2.3,4.0],
                   "학과":["컴퓨터","철학","컴퓨터","철학","컴퓨터"],
                   "학년":[1,2,3,2,2]})
display(df)

# "학과" column을 index로 변경 
new_df = df.set_index("학과")
display(new_df)

# 두개씩도 가능하다 
new_df = df.set_index(["학과","학년"])
display(new_df)

#원래형태로 변경할 수도 있다. 
origin_df = new_df.reset_index()
display(origin_df)







##Stack 과 Unstack
import numpy as np 
import pandas as pd

np.random.seed(1)
df = pd.DataFrame(np.random.randint(1,5,(2,3)),
                 index = ["서울","부산"],
                 columns = ["마케팅","개발","운영"])
display(df)

## stack함수 : 가지고있는 column을 index의 최하위 index로 생성 
new_df = df.stack()
display(new_df)

## 다시 원래 형태로 복구 가능하다. 
origin_df = new_df.unstack()
display(origin_df)

# 첫번째 인덱스를 col로 보내기 
origin_df = new_df.unstack(level=0)
display(origin_df) #뒤바껴버린 열과 행 (2행3열 => 3행 2열)






## 중복행 제거 및 추출
## : 만약 첫번째와 n번째 라인이 똑같다면? -> 중복항이 있으면 처리하는 법 
import numpy as np 
import pandas as pd

#중복되는 Data Frame을 만들기 위해 dictionary 선언
df=pd.DataFrame({ "k1" : ["one"]*3 + ["two"]*4,
                  "k2" : [1,1,2,3,3,4,4]})     #7행2열짜리 중복항이 있는 DF 
display(df)

#boolean mask를 만들어내는 함수 duplicated()
df.duplicated() 
display(df.loc[df.duplicated(),:]) #모든 중복항들이 다 나온다. 
display(df.loc[~df.duplicated(),:]) #모든 중복되지않은항들이 다 나온다. 
df.drop_duplicates() #중복항을 모두 제거할 수 있다. 
## 우리가 사용할 데이터를 정제할 때 중복항을 제거한다. 







## DataFrame의 grouping 
import numpy as np 
import pandas as pd
df = pd.DataFrame({"이름":["홍길동","김연아","아이유","김길동","신사임당"],
                   "성적":[1.5,4.4,4.5,2.3,4.0],
                   "학과":["컴퓨터","철학","컴퓨터","철학","컴퓨터"],
                   "학년":[1,2,3,2,2]})
display(df)

#학과를 기준으로 grouping =>  groupby()
dept= df["성적"].groupby(df["학과"]) #성적을 학과로 grouping하겠다 
display(dept.mean())
#학과
#철학     3.350000
#컴퓨터    3.333333
#Name: 성적, dtype: float64

#학과와 학년을 기준으로 성적을 grouping 
dept= df["성적"].groupby([df["학과"],df["학년"]])
display(dept.mean()) #결과가 series에 대한 multi-indexing으로 빠짐 
#학과   학년
#철학   2     3.35
#컴퓨터  1     1.50
#     2     4.00
#     3     4.50
#Name: 성적, dtype: float64

#data frame으로 
display(dept.mean().unstack())

####################################Pandas 끝 ~~!#############################################






