conn scott/oracle --scott DB에 접속
select table_name from user_tables; --scott소유(생성한)의 테이블 목록 
select table_name from all_tables; --소유 + 권한을 받을 테이블 목록
select count(table_name) from all_tables; 
select count(table_name) from dba_tables; -- 권한 불충분 오류 발생 

conn scott /oracle 
desc dept 

select constraint_type, constraint_type
from user_constraints 
where table_name = 'DEPT'; --테이블에 정의된 제약조건 확인 

--insert into 테이블명 values (컬럼값 리스트); → 1행 단위로 추가 
--insert into (컬럼명리스트) values (컬럼값 리스트); 
--insert into values (테이블에 정의된 순서의 컬럼값 리스트); 
insert into dept (deptno, dname) values(50, 'IT'); --생략된 컬럼값으로 자동으로 null 값으로 저장됨 
insert into dept values(70, 'IT','seoul'); -- 50으로 설정하면 무결성 오류때문에 충돌발생(에러)  
select * from dept; --메모리에만 새로운 데이터가 추가됨(명시적으로 DB의 물리적 저장소(file)에 저장시키는 명령어를 실행시켜야 저장(영속성) 됨) 
                    --세션(DB의 연결상태)의 비정상적인 종료나 DB서버가 비정상적으로 종료되면 데이터는 자동으로 rollback(취소) 됨 
rollback; --인위적인 rollback명령어

select * from dept;
insert into dept( dname, loc ) values ('web','inchon'); -- PK제약조건 위배, 오류 
                                                        -- ORA-01400: NULL을 ("SCOTT"."DEPT"."DEPTNO") 안에 삽입할 수 없습니다

select constraint_type, constraint_type
from user_constraints
where table_name = 'EMP'; --타입출력

select * from emp;
insert into emp(empno, ename, deptno, hiredate) values(9001, 'kim', 80, sysdate); 
--참조 무결성 제약조건 위반, dept.deptno 컬럼값 참조 
--ORA-02291: 무결성 제약조건(SCOTT.FK_DEPTNO)이 위배되었습니다- 부모 키가 없습니다
insert into emp(empno, ename, deptno, hiredate) values(10001, 'kim', 80, sysdate);
--컬럼 사이즈 오류, 네자리가 한계
--ORA-01438: 이 열에 대해 지정된 전체 자릿수보다 큰 값이 허용됩니다.
insert into emp(empno, ename, deptno, hiredate) values(1234, 'kim', 50, sysdate);
insert into emp(empno, ename, deptno, hiredate) values(100, 'lee', 50, to_date('19-03-05')); --값으로 함수로부터 반환된 값 가능 
insert into emp(empno, ename, deptno, hiredate) values(1000, 'kim', 50, null); --명시적으로 null 사용 가능 

create table student(
grade number(1),
class number(2),
name varchar2(15),
exam number(3) default 50); --student 테이블 작성

describe student 
desc student 
insert into student values(1, 1, 'Hong', null);  --1행 삽입
insert into student values(1, 2, 'Hong'); --SQL 오류: ORA-00947: 값의 수가 충분하지 않습니다
insert into student values(1, 1, 'Hong', default); -- default(=50)로 추가됨 
insert into student (grade, class, name) values(1, 3, 'Hong'); --생략된 컬럼값? default(=50)로 추가됨 
select * from student;

drop table dept2 purge; -- 기존 dept2가 있을시 삭제 
create table dept2
as select * from dept 
where 1 = 2; --조건 평가 결과는 false이므로 검색 data가 없으므로 테이블 구조만 복제됨 

desc dept                                           
desc dept2
select * from dept;
select * from dept2; --구조만 출력됨(행은 없음) 

insert into dept2
select * from dept 
where deptno <= 30; -- values 절 대신 subquery를 사용(subquery가 먼저 수행된다.) 
select * from dept2; -- 3개 행이 삽입된 것을 확인 


--# 컬럼값 단위로 row 수정하기 
--# update 테이블명 set컬럼명 = new_valuep[, 컬럼명 = new_value, ...];
--# update 테이블명 set컬럼명 = new_valuep[, 컬럼명 = new_value, ...]
--  where 조건; -- 조건을 만족하는 row만 변경됨 
select sal from emp;
update emp set sal =0; --모든 레코드의 sal컬럼값이 단일값으로 변경 
select sal from emp;

rollback;
update emp set sal = sal*1.1;
select sal from emp;

rollback;
update emp set sal = sal*1.1 where deptno = 20;

--# 변경할 컬럼에 제약조건, 함수, null, default등이 적용됨 
-- Q. smith 사원의 급여를 scott사원의 급여와 동일하도록 변경하시오 
select sal, ename from emp;

update emp set sal= (select sal from emp where ename = 'SCOTT')
where ename = 'SMITH';
--update의 set절, where 절에 subquery사용으로 설정 가능 
select sal, ename 
from emp 
where ename in ('SMITH','SCOTT');
rollback;



--#레코드 단위로 삭제 
--# delete from 테이블명; --테이블의 모든 행 삭제
--# delete from 테이블명 where 조건; -- 조건을 만족하는 행만 삭제 
select count(*) from emp;
delete from emp; --전체 row가 다 삭제됨 
select count(*) from emp;--0
rollback;
select count(*) from emp;

delete from emp where deptno = 20;
select count(*) from emp; --10
select deptno from emp;
rollback;


--Q. smith 사원과 동일한 직무를 담당하는 사원들 삭제 
--Hint/ delete from 테이블명 where 조건 = (subquery);
select * from emp;
select count(*) from emp; --15
delete from emp where job = (select job from emp where ename = 'SMITH'); --4개 행 삭제 
select * from emp; 
select count(*) from emp; --11
rollback;



--#merge문 - ETL작업에 유용 
--#join 조건에 따라 insert, update 수행, update 결과 조건으로 delete도 함께 수행 
/* merge into 타겟테이블 별칭 
   using 소스테이블 별칭 
   on(타겟테이블 .pk 컬럼 = 소스테이블 .pk 컬럼)
   when matched then 
     update set t.컬럼 = s.컬럼, ....
     [delete where 조건]
   when not matched then 
     insert (t.컬럼, t.컬럼, t.컬럼,..)
     values (s.컬럼, s.컬럼, s.컬럼,..) 
*/
create table tiny_emp
as select empno, ename, deptno, sal, job 
   from emp 
   where deptno=10; --auto commit (create은 롤백이 안된다)
   
select * from tiny_emp;


--Q. emp의 데이터를 tiny_emp로 이관하시오 
/* tiny_emp테이블에 이미 레코드가 존재하면 급여를 10%인상하고 
   인상된 급여가 5000보다 크면 삭제하고 
   tiny_emp 테이블에 emp테이블의 데이터가 존재하지 않으면 emp의 데이터를 
   insert 하시오 (merge구문 작성) 
*/
merge into tiny_emp t 
using emp s 
on(t.empno = s.empno)
when matched then 
  update set t.ename = s.ename, t.deptno=s.deptno, t.sal=s.sal*1.1, t.job=s.job
  delete where t.sal>5000
when not matched then 
  insert (t.empno, t.ename, t.deptno, t.sal, t.job)
  values (s.empno, s.ename, s.deptno, s.sal, s.job); --15개 행 이(가) 병합되었습니다.

select * from tiny_emp;
rollback;
